% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectralization.R
\name{spectralize}
\alias{spectralize}
\title{Laplacian decomposition.}
\usage{
spectralize(
  data,
  distance_method = "euclidean",
  kNN = 5,
  weighted = FALSE,
  simil_fun = function(x) 1/(1 + x),
  norm_laplacian = TRUE,
  return_laplacian = FALSE
)
}
\arguments{
\item{data}{a numeric data frame or matrix.}

\item{distance_method}{distance method. Call \code{get_kernel_info} for
available distance metrics.}

\item{kNN}{numeric, number of the nearest neighbors., has to be lower than
the dimension of \code{dist_mtx}.}

\item{weighted}{logical, should the affinity matrix be weighted by
similarity? Defaults to \code{TRUE}.}

\item{simil_fun}{a function used to convert pairwise distances
to pairwise similarities.}

\item{norm_laplacian}{logical, should the Laplacian matrix be normalized
prior to decomposition?}

\item{return_laplacian}{logical, should the Laplacian matrix be included in
the function output?}
}
\value{
a list of class \code{\link{spectre}} with the following elements:
\itemize{
\item \code{degrees}: degrees of the graph nodes stored in the diagonal of the degree
matrix
\item \code{eigen_values}: a numeric vector of eigenvalues sorted from the largest to
the smallest one
\item \code{eigen_vectors}: a numeric matrix whose rows represent the observations in
he initial data set and columns representing the eigenvectors.
The eigenvectors are sorted by their einegvalues: the largest come first.
}

Optionally, if \code{return_laplacian == TRUE}, the Laplacian matrix
(with or without normalization) is returned as well.
}
\description{
Performs a spectral decomposition of a pairwise distances between
observations of a data set.
}
\details{
The code is inspired by two sources:
https://rpubs.com/gargeejagtap/SpectralClustering
http://www.di.fc.ul.pt/~jpn/r/spectralclustering/spectralclustering.html.

The function combines the following computation steps:
\itemize{
\item \emph{distance matrix calculation}. The distance matrix is calculated via
\code{\link{calculate_dist}}, you may check available distance types by
calling \code{\link{get_kernel_info}}.
\item \emph{calculation of affinity matrix}. This step is accomplished by
\code{\link{dist2affi}} and results in a numeric representation of the
nearest neighborhood, i.e. affinity matrix A. Such matrix may be unweighted
(nearest neighbors get \code{1}, all other pairs 0) or weighted by similarity
(nearest neighbors: similarity statistic, all other pairs 0). It is important
to note, that conversion of the distance matrix to similarity matrix is done
by applying a user-provided function \code{simil_fun}. Its default value
corresponds to a common transformation of Euclidean distance to Euclidean
similarity, which must not be optimal for all distance measures.
\item \emph{calculation of degree matrix and Laplacian}. The degree matrix D is a
diagonal matrix, whose diagonal are sums of columns of the affinity matrix A.
As such, D stores the numbers of neighbors of a given observation or, from
a graph perspective, degree of the graph nodes. The Laplacian matrix U is
computed as a simple difference: \eqn{U = D - A}. It is, optionally,
normalized with the following formula: \eqn{U_{norm} = D^{-1/2} U D^{-1/2}}.
\item \emph{decomposition of the Laplacian}. This step is done via base R's
\code{\link[base]{eigen}} and generates eigenvectors and eigenvalues of the
Laplacian matrix U. The trailing smallest eigenvectors with eigenvalues
not departing substantially from 0 represent the base dimensions of the data
set and may be used for further analysis steps such as clustering.
The \code{plot()} method called for the \code{spectralize()} function output may be
helpful ad finding such trailing eigenvectors.
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cross_validation.R
\name{cv_cluster}
\alias{cv_cluster}
\title{Cross-validate a clustering algorithm.}
\usage{
cv_cluster(
  data,
  clust_assignment = NULL,
  nfolds = 5,
  type = c("propagation", "som"),
  kNN = 5,
  simple_vote = TRUE,
  resolve_ties = FALSE,
  kernel_fun = function(x) 1/x,
  clustering_fun = clustTools::kcluster,
  seed = 1234,
  .parallel = FALSE,
  ...
)
}
\arguments{
\item{data}{a numeric data frame, matrix or a \code{red_analysis} object. If a
\code{red_analysis} object is provided as the data argument, the observation
component/score table is subjected to clustering. For multi-layer SOM
analysis, the \code{data} argument is a list of such objects.}

\item{clust_assignment}{an optional data frame with two variables:
\code{observation} and \code{clust_id}, which defines the global cluster assignment.
If \code{NULL} (default), the global cluster assignment will be derived by
fitting the \code{clustering_fun} to the \code{data} - which can be a bit slower.}

\item{nfolds}{number of CV folds.}

\item{type}{type of the prediction algorithm: k-nearest neighbors
(propagation) or via the self-organizing map ('som', available only
for SOM and combined SOM clustering).}

\item{kNN}{number of the nearest neighbors.}

\item{simple_vote}{logical, should classical unweighted k-NN classification
be applied? If FALSE, distance-weighted k-NN is used with the provided kernel
function.}

\item{resolve_ties}{logical, should the ties be resolved at random? Applies
only to the simple unweighted voting algorithm.}

\item{kernel_fun}{kernel function transforming the distance into weight.}

\item{clustering_fun}{clustering function. Should return a
\code{clust_analysis} object.}

\item{seed}{initial setting of the random number generator.}

\item{.parallel}{logical, should the CV be run in parallel?}

\item{...}{extra arguments passed to the clustering_fun.}
}
\value{
a list containing the following elements:
\itemize{
\item the global \code{\link{clust_analysis}} object (\code{clust_analysis_object})
\item kNN projection (prediction) results (\code{predictions})
\item a data frame with the classification error, accuracy, fraction of
explained clustering variance and silhouette for the out-of-fold
predictions (\code{fold_stats})
\item means and BCA's 95\% confidence intervals for the classification error,
accuracy, fraction of explained variance and silhouette (\code{summary})
}
}
\description{
Checks the quality of a clustering solution by
cross-validation (CV) with k-nearest neighbors (kNN) out-of-fold predictions
or predictions made by a self-organizing map (SOM).
Stability of the clustering structure is measured by cluster assignment
classification error in the out-of-fold predictions as compared with the
genuine clustering structure. Explanatory value and cluster separation are
determined by clustering variance and silhouette statistics.
}
\details{
By principle, similar to cross-validation of any machine learning
multi-class classifier. The training portion of a CV split is used to develop
of a cluster structure and the projection on the test portion is accomplished
by k-nearest neighbor (kNN) label propagation algorithm or derives the
cluster assignment from a trained SOM.
For implementation details, see: \code{\link{propagate}}
and \code{\link{map_som}}.
The folds are generated with \code{\link[caret]{createFolds}}.
}
\references{
Lange T, Roth V, Braun ML, Buhmann JM. Stability-based validation of
clustering solutions. Neural Comput (2004) 16:1299–1323.
doi:10.1162/089976604773717621

Leng M, Wang J, Cheng J, Zhou H, Chen X. Adaptive semi-supervised
clustering algorithm with label propagation. J Softw Eng (2014) 8:14–22.
doi:10.3923/jse.2014.14.22

Kuhn M. Building predictive models in R using the caret package.
J Stat Softw (2008) 28:1–26. doi:10.18637/jss.v028.i05

Rousseeuw PJ. Silhouettes: A graphical aid to the interpretation and
validation of cluster analysis. J Comput Appl Math (1987) 20:53–65.
doi:10.1016/0377-0427(87)90125-7

Kohonen T. Self-Organizing Maps. Berlin, Heidelberg: Springer Berlin
Heidelberg (1995). doi:10.1007/978-3-642-97610-0

Wehrens R, Kruisselbrink J. Flexible self-organizing maps in kohonen 3.0.
J Stat Softw (2018) 87:1–18. doi:10.18637/jss.v087.i07
}
